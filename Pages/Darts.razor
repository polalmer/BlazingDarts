@page "/"
@using Classes;

<PageTitle>BlazingDarts</PageTitle>

@if(playing){
    <div>
        <div class="ScoreBoard">
            @foreach(Player player in players){
                <label>Name:@player.name</label>
                @if(player == currentPlayer)
                {
                    <input type="text" @bind="@player.score" style="color:blue" readonly />
                }
                else
                {
                    <input type="text" @bind="@player.score" readonly />
                }             
            }
        </div>
        <div class="InputContainer">
            <InputSelect @bind-Value="multiplikator">
                <option value="1">Single</option>
                <option value="2">Double</option>
                <option value="3">Triple</option>
            </InputSelect>
            <div class="ButtonsContainer">
                @foreach (var row in Enumerable.Range(1, 5))
                {
                    <div class="Buttons" key="@row">
                        @foreach (var num in Enumerable.Range(1, 4))
                        {
                            <button class="Numberbutton" @onclick="() => HandleThrow((row - 1) * 4 + num)" key="@num">
                                @((row - 1) * 4 + num)
                            </button>
                        }
                    </div>
                }
                <div class="Buttons">
                    <button class="Numberbutton" @onclick="() => HandleThrow(25)">Bull</button>
                    <button class="Missedbutton" @onclick="() => HandleThrow(0)">Miss</button>
                </div>
            </div>
        </div>
    </div>   
}
else{
    <input type="text" @bind="playerName"/>
    <ul>
        @foreach(Player player in players){
            <li>@player.name</li>
        }
    </ul>
    <button @onclick="() => AddPlayer()">Add Player</button>
    <button @onclick="() => StartGame()">Start Game</button>
}


@code {
    private bool playing = false;
    private string playerName = string.Empty;
    private int multiplikator = 1;
    private List<Player> players = [];

    private Player currentPlayer;
    private int playerIndex = 0;

    private void HandleThrow(int value)
    {
        int hit = multiplikator * value;
        currentPlayer.score -= hit;
        currentPlayer.AddThrow(hit);

        if(currentPlayer.score == 0 && multiplikator == 2)
        {
            //Checkout
            GameWon(currentPlayer);
        }
        else if(currentPlayer.score <= 1)
        {
            //over throw
            currentPlayer.ResetLastThree();
        }

        if(currentPlayer.lastThree.third is not null)
        {
            //next player
            currentPlayer.throws.Add(currentPlayer.lastThree);
            currentPlayer.lastThree = (null, null, null);

            if(playerIndex == players.Count - 1)
            {
                playerIndex = 0;
            }
            else
            {
                playerIndex++;
            }
            currentPlayer = players[playerIndex];
        }
    }

    private void AddPlayer(){
        players.Add(new Player(playerName));
        playerName = string.Empty;
    }

    private void StartGame(){
        playing = true;
        currentPlayer = players[playerIndex]; 
    }

    private void GameWon(Player winner)
    {
        winner.throws.Add(currentPlayer.lastThree);
        winner.lastThree = (null, null, null);
        //win game or so
    }
}